(print "----------------")

(print "問題2.1")
(print "--")

(define (add-rat x y)
  (make-rat (+ (* (number x) (denom y))
               (* (number y) (denom x))
            )
            (* (denom x) (denom y))
  )
)

(define (sub-rat x y)
  (make-rat (- (* (number x) (denom y))
               (* (number y) (denom x))
            )
            (* (denom x) (denom y))
  )
)

(define (mul-rat x y)
  (make-rat (* (number x) (number y))
            (* (denom x) (denom y))
  )
)

(define (div-rat x y)
  (make-rat (* (number x) (denom y))
            (* (denom x) (number y))
  )
)

(define (equal-rat? x y)
  (= (* (number x) (denom y))
     (* (number y) (denom x))
  )
)

(define (make-rat n d) 
  (let ((g (gcd n d)))
    (cons (/ n g) (/ d g))
  )
)
(define (gcd x y)
  (if (= y 0)
    x
    (gcd y (remainder x y))
  )
)
(define (number x) (car x))
(define (denom x) (cdr x))

(define (print-rat x)
  (display (number x))
  (display " / ")
  (display (denom x))
  (newline)
)

(display "(gcd 6 9) => ")
(print (gcd 6 9))
(display "(gcd (- 6) 9) => ")
(print (gcd (- 6) 9))
(display "(gcd 6 (- 9)) => ")
(print (gcd 6 (- 9)))
(display "(gcd (- 6) (- 9)) => ")
(print (gcd (- 6) (- 9)))

(print "--")

(display "(make-rat 2 3) => ")
(print-rat (make-rat 2 3))
(display "(make-rat 2 (- 3)) => ")
(print-rat (make-rat 2 (- 3)))
(display "(make-rat (- 2) 3) => ")
(print-rat (make-rat (- 2) 3))
(display "(make-rat (- 2) (- 3)) => ")
(print-rat (make-rat (- 2) (- 3)))
(newline)
(display "(mul-rat (make-rat (- 2) 3) (make-rat 2 3)) => ")
(print-rat (mul-rat (make-rat (- 2) 3) (make-rat 2 3)))
(display "(mul-rat (make-rat 2 (- 3)) (make-rat 2 3)) => ")
(print-rat (mul-rat (make-rat 2 (- 3)) (make-rat 2 3)))
(display "(mul-rat (make-rat 2 3) (make-rat (- 2) 3)) => ")
(print-rat (mul-rat (make-rat 2 3) (make-rat (- 2) 3)))
(display "(mul-rat (make-rat 2 3) (make-rat 2 (- 3))) => ")
(print-rat (mul-rat (make-rat 2 3) (make-rat 2 (- 3))))
(display "(mul-rat (make-rat (- 2) 3) (make-rat (- 2) 3)) => ")
(print-rat (mul-rat (make-rat (- 2) 3) (make-rat (- 2) 3)))
