(print "----------------")

(print "問題1.45")
(print "--")

(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance)
  )
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
        next
        (try next)
      )
    )
  )
  (try first-guess)
)

(define (average x y) (/ (+ x y) 2))

(define (average-damp f)
  (lambda (x) (average x (f x)))
)

(define (fixed-point-of-transform g transform guess)
  (fixed-point (transform g) guess)
)

(define (repeated f count)
  (define (repeated-iter count res)
    (cond ((> count 0) (repeated-iter (- count 1) (f res)))
          ((= count 0) res)
          (else error) ; error!
    )
  )
  (lambda (x) (repeated-iter count x))
)

; import --

(define (sqrt x)
  (fixed-point-of-transform (lambda (y) (/ x y)) average-damp 1.0)
)
(display "(sqrt 2) => ")
(print (sqrt 2))

(define (san x)
  (fixed-point-of-transform (lambda (y) (/ x (* y y))) average-damp 1.0)
)
(display "(san 2) => ")
(print (san 2))

(print "--")

; --

(define (jokon x j)
  (define (kaijo x j)
    (define (kaijo-itr x count res)
      (cond ((> count 0) (kaijo-itr x (- count 1) (* res x)))
            ((= count 0) res)
            ((< count 0) (if (= x 0)
                             error ; error!
                             (kaijo-itr x (+ count 1) (/ res x))
                         )
            )
      )
    )
    (kaijo-itr x j 1)
  )
  (define (bunbo x)
    (kaijo x (- j 1))
  )
  (define repeat-average-damp
    (let ((dec-j (floor (log j 2)))) ; decrement value
      (if (> dec-j 0)
          (lambda (x) ((repeated average-damp dec-j) x))
          (lambda (x) (average-damp x))
      )
    )
  )
  (fixed-point-of-transform (lambda (y) (/ x (bunbo y))) repeat-average-damp 1.0)
)

(display "(jokon 2 2) => ")
(print (jokon 2 2))
(display "(jokon 8 3) => ")
(print (jokon 8 3))
(display "(jokon 16 4) => ")
(print (jokon 16 4))
(display "(jokon 32 5) => ")
(print (jokon 32 5))
(display "(jokon 128 7) => ")
(print (jokon 128 7))
(display "(jokon 256 8) => ")
(print (jokon 256 8))
(display "(jokon 512 9) => ")
(print (jokon 512 9))



(print "----------------")

(print "問題1.46")
(print "--")

(define (iterative-improve check action)
  (define (check-action guess)
    (define (check-action-itr guess)
      (let ((next (action guess)))
        (if (check next guess)
          next
          (check-action-itr next)
        )
      )
    )
    (check-action-itr guess)
  )
  (lambda (guess) (check-action guess))
)

(define (sqrt x)
  (define (close-enough? next guess)
    (< (abs (- next guess)) tolerance)
    ;(< (abs (- x (* next next))) tolerance)
  )
  (define (f guess)
    (average (/ x guess) guess)
  )
  (display "[called? 4.6 sqrt] ")
  ((iterative-improve close-enough? f) 1.0)
)

(display "(sqrt 2) => ")
(print (sqrt 2))
(display "(sqrt 3) => ")
(print (sqrt 3))
(display "(sqrt 4) => ")
(print (sqrt 4))
(display "(sqrt 5) => ")
(print (sqrt 5))
(print "--")

(define (fixed-point f first-guess)
  (define (close-enough? next guess)
    (< (abs (- next guess)) tolerance)
  )
  (display "[called? 4.6 fixed-point] ")
  ((iterative-improve close-enough? f) first-guess)
)

(display "(jokon 2 2) => ")
(print (jokon 2 2))
(display "(jokon 2 3) => ")
(print (jokon 2 3))
(display "(jokon 2 4) => ")
(print (jokon 2 4))
(display "(jokon 2 5) => ")
(print (jokon 2 5))
